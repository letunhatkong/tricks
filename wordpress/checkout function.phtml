
<!-- CHECK OUT PAGE -->

<!-- Get order -->
$order = wc_get_order( $order_id );

<!-- Update order item meta value -->
wc_update_order_item_meta( $item_id, $meta_key, $meta_value, $prev_value );

<!-- Disable ajax reload page -->
Rename class form "checkout" to "checkout1" in woocommerce/checkout/form-checkout.php

<!-- Send another email after checkout  -->
plugins\woocommerce\includes\emails\class-wc-email-new-order.php
get $storeEmail = get_post_meta( $order_id, "_billing_store_email", true);

<!-- Fix bug scroll to top in checkout page -->
<script type="text/javascript">
    jQuery( document.body ).on( 'checkout_error', function() {
        jQuery( 'html, body' ).animate({
            scrollTop: 0
        }, 500); 
    });

</script>

<!-- Remove Billing, Shipping text in error mess -->
Go to class-wc-checkout.php
Find "is a required field" 
$field_label = sprintf( _x( '%s', 'Billing FIELDNAME', 'woocommerce' ), $field['label'] );


<?php
// START FUNCTION.PHP



// ReCalc shipping when state is changed. Same same when country is changed.
add_filter( 'woocommerce_checkout_fields', 'default_values_checkout_fields' );
function default_values_checkout_fields( $fields ) {
    $fields['billing']['billing_state']['class']   = array( 'address-field', 'update_totals_on_change' );
    $fields['shipping']['shipping_state']['class'] = array( 'address-field', 'update_totals_on_change' );

    return $fields;
}

// Change shipping price
add_filter( 'woocommerce_package_rates', 'observer_change_shipping_rate', 100, 2 );
function observer_change_shipping_rate( $rates, $package ) {
    global $woocommerce;
    $c = $woocommerce->customer->get_shipping_country();
    $s = $woocommerce->customer->get_shipping_state();
    $cartSubTotal = WC()->cart->subtotal;

    foreach ( $rates as $rate ) {
        // Canada, Alaska & Hawaii: A flat rate of $10.00 is applied.
        if ( $c === "CA" || ( $c === "US" && $s === "AK" ) || ( $c === "US" && $s === "HI" ) ) {
            $rate->cost = 10;
        } // domestic US
        else if ( $c === "US" && $s !== "AK" && $s !== "HI" ) {
            if ( $cartSubTotal <= 100 ) {
                $rate->cost = 5;
            } else {
                $rate->cost  = 0;
                $rate->label = "Free";
            }
        } // international
        else {
            if ( 0 < $cartSubTotal && $cartSubTotal < 100 ) {
                $rate->cost = 25;
            } else if ( 100 <= $cartSubTotal && $cartSubTotal < 200 ) {
                $rate->cost = 35;
            } else {
                $rate->cost = 45;
            }
        }
        //Set the TAX
        //$rate->taxes[1] = 1000 * 0.2;
    }

    return $rates;
}

// Set default stage, country, and zipcode
// describe in woocommerce/includes/class-wc-deprecaed-filter-hooks.php
add_filter( 'default_checkout_country', 'xa_set_default_checkout_country' );
function xa_set_default_checkout_country() {
    return 'US';
}
add_filter( 'default_checkout_state', 'xa_set_default_checkout_state' );
function xa_set_default_checkout_state() {
    return 'VA';
}
add_filter( 'default_checkout_postcode', 'xa_set_default_checkout_postcode' );
function xa_set_default_checkout_postcode() {
    return '123456';
}

/**
 * Add custom billing_fields in woocommerce
 * @param  array $fields 
 * @return void
 */
function custom_woocommerce_billing_fields($fields) {
    $fields['store_email'] = array(
        'label' => __('Select store where you buy', 'woocommerce'), 
        'placeholder' => _x('', 'placeholder', 'woocommerce'), 
        'required' => true,
        'clear' => false,
        'type' => 'select', 
        'options' => array(
            'letunhatkong@gmail.com' => 'Store 1 - Mr. J’S Bagels East Market Street',
            'kong.le@seadev.com.vn' => 'Store 2 - Mr. J’S Bagels South High Street',
            'quang.than@seadev.com.vn' => 'Store 3 - Mr. J’S Bagels Virginia Ave',
        )
    );

    $fields['billing_options'] = array(
        'label' => __('NIF', 'woocommerce'), // Add custom field label
        'placeholder' => _x('Your NIF here....', 'placeholder', 'woocommerce'), // Add custom field placeholder
        'required' => true, // if field is required or not
        'clear' => false, // add clear or not
        'type' => 'text', // add field type
        'class' => array('my-css')    // add class name
    );

    return $fields;
}
add_filter('woocommerce_billing_fields', 'custom_woocommerce_billing_fields');


/**
 * Edit field
 * https://docs.woocommerce.com/document/tutorial-customising-checkout-fields-using-actions-and-filters/
 * @return [type]         [description]
 */
function custom_override_checkout_fields( $fields ) {
    unset($fields['billing']['billing_company']); // Remove company field    
    return $fields;
}
add_filter( 'woocommerce_checkout_fields' , 'custom_override_checkout_fields' );

/**
* Update the order meta with field value
*/
function save_custom_checkout_field( $order_id ) {
    if ( ! empty($_POST['store_email']) ) {
        update_post_meta( $order_id, '_billing_store_email', sanitize_text_field($_POST['store_email']) );
    }
}
add_action('woocommerce_checkout_update_order_meta', 'save_custom_checkout_field');

/**
 *  Remove payment gateway
 */
add_filter('woocommerce_cart_needs_payment', '__return_false');


// Get data item in order
$order_items = $order->get_items();
foreach ($order_items as $key => $value) {
    echo json_encode($value["name"]) . "<br>";
    echo json_encode($value["order_id"]) . "<br>";
    echo json_encode($value["quantity"]) . "<br>";
    echo json_encode($value["product_id"]) . "<br>";
    echo json_encode($value["subtotal"]) . "<br>";
    echo json_encode($value["total"]) . "<br>";
}


// Gift cards

function create_coupon( $coupon_code, $price ) {
    $check = checkCouponExists( $coupon_code );
    if ( $check ) {
        $current = get_post_meta( $check, "coupon_amount" );
        if ( is_array( $current ) ) {
            $current = reset( $current );
        }
        $amount = floatval( $price + $current );
        $amount = round( $amount * 100 ) / 100;
        update_post_meta( $check, 'coupon_amount', $amount );
    } else {
        $amount        = $price;
        $discount_type = 'fixed_cart'; // Type: fixed_cart, percent, fixed_product, percent_product
        $coupon        = array(
            'post_title'   => $coupon_code,
            'post_content' => '',
            'post_status'  => 'publish',
            'post_author'  => 1,
            'post_type'    => 'shop_coupon'
        );

        $new_coupon_id = wp_insert_post( $coupon );

        // Expiry date
        $d           = date( "-m-d", time() );
        $y           = date( "Y", time() );
        $expiry_date = ( $y + 1 ) . $d;

        // Add meta
        update_post_meta( $new_coupon_id, 'discount_type', $discount_type );
        update_post_meta( $new_coupon_id, 'coupon_amount', $amount );
        update_post_meta( $new_coupon_id, 'individual_use', 'no' );
        update_post_meta( $new_coupon_id, 'product_ids', '' );
        update_post_meta( $new_coupon_id, 'exclude_product_ids', '' );
        update_post_meta( $new_coupon_id, 'usage_limit', '' );
        update_post_meta( $new_coupon_id, 'expiry_date', $expiry_date );
        update_post_meta( $new_coupon_id, 'apply_before_tax', 'yes' );
        update_post_meta( $new_coupon_id, 'free_shipping', 'no' );
    }
}

add_action( "woocommerce_checkout_update_order_meta", "after_click_place_order" );
function after_click_place_order( $order_id ) {
    $order = wc_get_order( $order_id );
    // Decrease coupon value
    $discount = $order->get_discount_total();
    $discount = ( round( floatval( $discount ) * 100 ) / 100 );
    $coupons  = $order->get_used_coupons();
    $count    = count( $coupons );
    if ( $count === 1 ) {
        $coupon = reset( $coupons );
        coupon_decrease_val( $coupon, $discount );
    } else if ( $count > 0 ) {
        $cur = 0;
        foreach ( $coupons as $coupon ) {
            if ( $cur >= 0 ) {
                $discount = $discount - $cur;
            }
            $cur = coupon_decrease_val( $coupon, $discount );
        }
    }

    // Create gift card
    $couponProductId = 696; // 696
    $order_items     = $order->get_items();
    foreach ( $order_items as $key => $value ) {
        if ( $value["product_id"] === $couponProductId ) {
            $time       = time();
            $orderKey   = $order->order_key . ":" . $time;
            $couponCode = substr( md5( $orderKey ), 0, 12 );
            $price      = $value["subtotal"];
            create_coupon( $couponCode, $price );
            wc_update_order_item_meta( $key, "Coupon", $couponCode );
        }
    }
}

function coupon_decrease_val( $code, $price ) {
    $id = checkCouponExists( $code );
    if ( $id ) {
        $current = get_post_meta( $id, "coupon_amount" );
        if ( is_array( $current ) ) {
            $current = reset( $current );
        }
        $current = round( floatval( $current ) * 100 ) / 100;
        $price   = round( floatval( $price ) * 100 ) / 100;
        $price   = $current - $price;
        $price   = ( $price <= 0 ) ? 0 : $price;
        update_post_meta( $id, 'coupon_amount', $price );

        return $current;
    }

    return - 1;
}


function checkCouponExists( $code ) {
    $exist = false;
    $args  = array(
        'post_type'  => 'shop_coupon',
        'status'     => 'publish',
        'post_title' => $code,
    );
    $loop  = new WP_Query( $args );
    foreach ( $loop->posts as $post ) {
        if ( $code === $post->post_title ) {
            $exist = $post->ID;
            break;
        }
    }

    return $exist;
}

// # Gift cards

// END FUNCTION.PHP
?>


